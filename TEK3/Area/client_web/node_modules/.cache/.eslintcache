[{"/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/index.js":"1","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/App.js":"2","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/AuthContext.js":"3","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/PrivateRoutes.js":"4","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/components/ColorContext.js":"5","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/pages/LoginForm.js":"6","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/pages/Dashboard.js":"7","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/pages/Settings.js":"8","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/pages/RegistrationForm.js":"9","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/pages/Reaction.js":"10","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/pages/Action.js":"11","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/pages/Applet.js":"12","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/components/StopApplet.js":"13","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/components/InputPassword.js":"14","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/components/InputSettings.js":"15","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/components/InputText.js":"16","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/components/GetApplets.js":"17","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/components/ExecuteApplet.js":"18","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/components/GetReactionList.js":"19","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/components/GetActionList.js":"20","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/components/CreateReaction.js":"21","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/components/CreateApplet.js":"22","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/components/CreateAction.js":"23","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/request/Login_request.js":"24","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/request/GetUserData.js":"25","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/request/UpdateUserData.js":"26","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/request/Register_request.js":"27","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/request/GoogleLogin.js":"28","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/request/GoogleCallback.js":"29"},{"size":276,"mtime":1698151441736,"results":"30","hashOfConfig":"31"},{"size":1299,"mtime":1699202428343,"results":"32","hashOfConfig":"31"},{"size":512,"mtime":1698151441735,"results":"33","hashOfConfig":"31"},{"size":438,"mtime":1698151441735,"results":"34","hashOfConfig":"31"},{"size":517,"mtime":1698151441735,"results":"35","hashOfConfig":"31"},{"size":3146,"mtime":1699203723015,"results":"36","hashOfConfig":"31"},{"size":5759,"mtime":1699202363853,"results":"37","hashOfConfig":"31"},{"size":3469,"mtime":1699203465895,"results":"38","hashOfConfig":"31"},{"size":4624,"mtime":1699203757184,"results":"39","hashOfConfig":"31"},{"size":6339,"mtime":1698771686209,"results":"40","hashOfConfig":"31"},{"size":6329,"mtime":1698771657207,"results":"41","hashOfConfig":"31"},{"size":3870,"mtime":1698771525453,"results":"42","hashOfConfig":"31"},{"size":1147,"mtime":1698151441736,"results":"43","hashOfConfig":"31"},{"size":1003,"mtime":1698151441736,"results":"44","hashOfConfig":"31"},{"size":1483,"mtime":1698768910725,"results":"45","hashOfConfig":"31"},{"size":447,"mtime":1698151441736,"results":"46","hashOfConfig":"31"},{"size":1124,"mtime":1698245096277,"results":"47","hashOfConfig":"31"},{"size":1190,"mtime":1698151441735,"results":"48","hashOfConfig":"31"},{"size":1144,"mtime":1698151441736,"results":"49","hashOfConfig":"31"},{"size":1141,"mtime":1698151441735,"results":"50","hashOfConfig":"31"},{"size":1420,"mtime":1698151441735,"results":"51","hashOfConfig":"31"},{"size":1551,"mtime":1698151441735,"results":"52","hashOfConfig":"31"},{"size":1090,"mtime":1698151441735,"results":"53","hashOfConfig":"31"},{"size":358,"mtime":1698151441736,"results":"54","hashOfConfig":"31"},{"size":1127,"mtime":1698151441736,"results":"55","hashOfConfig":"31"},{"size":394,"mtime":1698151441736,"results":"56","hashOfConfig":"31"},{"size":497,"mtime":1698151441736,"results":"57","hashOfConfig":"31"},{"size":376,"mtime":1699175841369,"results":"58","hashOfConfig":"31"},{"size":236,"mtime":1699176059756,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"15il34w",{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"63"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"63"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"63"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"63"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"63"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/index.js",[],[],["153"],"/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/App.js",[],[],"/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/AuthContext.js",[],[],"/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/PrivateRoutes.js",[],[],"/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/components/ColorContext.js",[],[],"/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/pages/LoginForm.js",["154"],[],"/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/pages/Dashboard.js",["155","156"],[],"import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useAuth } from '../AuthContext';\nimport '../styles/Dashboard.css';\nimport GetUserData from '../request/GetUserData';\nimport GetApplets from '../components/GetApplets';\nimport ExecuteApplet from '../components/ExecuteApplet';\nimport StopApplet from '../components/StopApplet';\nimport logo from '../assets/logo.png';\nimport { getGoogleUserData } from '../request/GoogleCallback';\n\nconst Dashboard = () => {\n  const history = useHistory();\n  const [userData, setUserData] = useState(null);\n  const { token, login } = useAuth();\n  const [backgroundColor, setBackgroundColor] = useState('white');\n  const [textColor, setTextColor] = useState('black');\n  const [AppletsList, setAppletsList] = useState([]);\n\n  const goSettings = () => {\n    history.push('/Settings');\n  };\n\n  const goAction = () => {\n    history.push('/Action');\n  };\n\n  const changeBackgroundColor = () => {\n    const newBackgroundColor = backgroundColor === 'black' ? 'white' : 'black';\n    setBackgroundColor(newBackgroundColor);\n    localStorage.setItem('backgroundColor', newBackgroundColor);\n    const newTextColor = textColor === 'white' ? 'black' : 'white';\n    setTextColor(newTextColor);\n    localStorage.setItem('textColor', newTextColor);\n    document.body.style.backgroundColor = newBackgroundColor;\n  };\n\n  useEffect(() => {\n    if (token && !userData) {\n      GetUserData(token)\n        .then((response) => {\n          if (response.status === 200) {\n            setUserData(response.data);\n          } else {\n            console.error(\"Erreur lors de la récupération des données de l'utilisateur.\");\n          }\n        })\n        .catch((error) => {\n          console.error(\"Erreur lors de la récupération des données de l'utilisateur.\", error);\n        });\n    }\n    const savedBackgroundColor = localStorage.getItem('backgroundColor');\n    const savedTextColor = localStorage.getItem('textColor');\n    if (savedBackgroundColor) {\n      setBackgroundColor(savedBackgroundColor);\n      document.body.style.backgroundColor = savedBackgroundColor;\n    }\n    if (savedTextColor) {\n      setTextColor(savedTextColor);\n    }\n    handleGoogleCallback();\n  }, [token, userData]);\n\n  useEffect(() => {\n    GetApplets(token)\n      .then((responseData) => {\n        if (responseData.status === 200) {\n          setAppletsList(responseData.data);\n        } else {\n          console.error('Error fetching action list');\n        }\n      })\n      .catch((error) => {\n        console.error('Error fetching action list:', error);\n      });\n  }, [token]);\n\n  function start(id) {\n    ExecuteApplet(id, token).then((response) => {\n      if (response.status === 200) {\n        console.log('Service started: ', response);\n      } else {\n        console.log('Error while starting service');\n      }\n    });\n  }\n\n  function stop(id) {\n    StopApplet(id, token).then((response) => {\n      if (response.status === 200) {\n        console.log('Service stopped: ', response);\n      } else {\n        console.log('Error while stopping service');\n      }\n    });\n  }\n\n  const handleGoogleCallback = async () => {\n    try {\n      const urlParams = new URLSearchParams(window.location.search);\n      const code = urlParams.get('code');\n      if (code) {\n        const Response = await getGoogleUserData(code);\n        const userData = Response.user;\n        const token = Response.token\n        login(token);\n      } else {\n        console.log(\"error\");\n      }\n    } catch (error) {\n      console.error('Error fetching user data from Google:', error);\n    }\n  };\n\n  return (\n    <div>\n      <div class=\"dashboard-container\" style={{ backgroundColor: backgroundColor }}>\n        <div class=\"top-bar\" style={{ borderBottom: \"3px solid\", borderColor: textColor }}>\n          <img src={logo} alt=\"Your Logo\" class=\"logo\" />\n          <h1 class=\"dashboard-title\" style={{ color: textColor }}>Dashboard</h1>\n          <div>\n            <button class=\"btn btn-settings\" onClick={goSettings} style={{ backgroundColor: backgroundColor, borderColor: textColor, color: textColor }}>\n              Settings\n            </button>\n            <button\n              class=\"btn btn-dark-theme\"\n              onClick={changeBackgroundColor}\n              style={{ backgroundColor: backgroundColor, borderColor: textColor, color: textColor }}\n            >\n            {backgroundColor === 'white' ? 'Dark theme' : 'Light theme'}\n            </button>\n          </div>\n        </div>\n        <div class=\"window-dashboard\">\n          <h1 class=\"welcome-text\" style={{ color: textColor, backgroundColor: backgroundColor }}>\n            Welcome {userData ? userData.firstname : ''}\n          </h1>\n          <button onClick={goAction} class=\"btn-action\">\n            Create an applet\n          </button>\n          {AppletsList.length === 0 ? (\n            <p class=\"no-applets\" style={{ color: textColor, fontFamily: 'Roboto, sans-serif' }}>No applet yet</p>\n          ) : (\n            <div class=\"applets-container\">\n              {AppletsList.map((applet, index) => (\n                <div key={index} class=\"applet-rectangle\" style={{ backgroundColor: backgroundColor, borderColor: textColor, color: textColor }}>\n                  <h2>{applet.name}</h2>\n                  <p>{applet.description}</p>\n                  <button class=\"start-button\" onClick={() => start(applet._id)}>\n                    Start\n                  </button>\n                  <button class=\"stop-button\" onClick={() => stop(applet._id)}>\n                    Stop\n                  </button>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/pages/Settings.js",["157"],[],"import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useAuth } from '../AuthContext';\nimport '../styles/Settings.css';\nimport InputSettings from '../components/InputSettings';\nimport GetUserData from '../request/GetUserData';\nimport UpdateUserData from '../request/UpdateUserData';\nimport logo from '../assets/logo.png';\n\nconst Settings = () => {\n  const history = useHistory();\n  const { token } = useAuth();\n  const [userData, setUserData] = useState(null);\n  const [updateSuccess, setUpdateSuccess] = useState(false);\n\n  const getStoredTheme = () => {\n    const savedBackgroundColor = localStorage.getItem('backgroundColor');\n    const savedTextColor = localStorage.getItem('textColor');\n    return {\n      backgroundColor: savedBackgroundColor || 'white',\n      textColor: savedTextColor || 'black',\n    };\n  };\n\n  const [theme, setTheme] = useState(getStoredTheme);\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const response = await GetUserData(token);\n        const userData = response.data;\n        setUserData(userData);\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      }\n    };\n    fetchUserData();\n  }, [token]);\n\n  const ChangeSettings = async (e) => {\n    e.preventDefault();\n    try {\n      await UpdateUserData(userData, token);\n      setUpdateSuccess(true);\n    } catch (error) {\n      console.error('Error updating user data:', error);\n    }\n  };\n\n  const updateUserData = (field, value) => {\n    setUserData((prevUserData) => ({\n      ...prevUserData,\n      [field]: value,\n    }));\n  };\n\n  const goHome = () => {\n    history.push('/Dashboard');\n  };\n\n  document.body.style.backgroundColor = theme.backgroundColor;\n  document.body.style.color = theme.textColor;\n\n  return (\n    <div className=\"settings-container\">\n      <div className=\"top-bar\" style={{ borderBottom: \"3px solid\", borderColor: theme.textColor }}>\n        <img src={logo} alt=\"Your Logo\" class=\"logo\" />\n        <h1 class=\"settings-title\" style={{ color: theme.textColor }}>Settings</h1>\n        <button class=\"btn btn-dashboard\" onClick={goHome} style={{ backgroundColor: theme.backgroundColor, borderColor: theme.textColor, color: theme.textColor }}>\n          Dashboard\n        </button>\n      </div>\n      <div className=\"window-settings\" style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', marginTop: \"100px\" }}>\n        {userData ? (\n          <form onSubmit={ChangeSettings}>\n            <InputSettings defaultText={userData.firstname} header={\"Name:\"} type={\"text\"} updateField={(value) => updateUserData('firstname', value)} />\n            <InputSettings defaultText={userData.name} header={\"Firstname:\"} type={\"text\"} updateField={(value) => updateUserData('name', value)} />\n            <InputSettings defaultText={userData.username} header={\"Username:\"} type={\"text\"} updateField={(value) => updateUserData('username', value)} />\n            <InputSettings defaultText={userData.email} header={\"email:\"} type={\"text\"} updateField={(value) => updateUserData('email', value)} />\n            <button type=\"submit\" className='Submit-button'>Update user data</button>\n            {updateSuccess && <p style={{ color: 'green' }}>Data updated successfully!</p>}\n          </form>\n        ) : (\n          <p>Loading user data...</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Settings;\n","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/pages/RegistrationForm.js",["158"],[],"/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/pages/Reaction.js",["159","160"],[],"import React, { useEffect, useState } from 'react';\nimport GetReactionList from '../components/GetReactionList';\nimport \"../styles/Reaction.css\"\nimport { useAuth } from '../AuthContext';\nimport { useHistory } from 'react-router-dom';\nimport InputSettings from '../components/InputSettings';\nimport CreateReaction from '../components/CreateReaction';\nimport logo from '../assets/logo.png';\n\nconst Reaction_form = () => {\n    const [ReactionList, setReactionList] = useState([]);\n    const [selectedReaction, setSelectedReaction] = useState(null);\n    const [Name, setName] = useState('');\n    const [Description, setDescription] = useState('');\n    const { token } = useAuth();\n    const history = useHistory();\n\n    const getStoredTheme = () => {\n        const savedBackgroundColor = localStorage.getItem('backgroundColor');\n        const savedTextColor = localStorage.getItem('textColor');\n        return {\n            backgroundColor: savedBackgroundColor || 'white',\n            textColor: savedTextColor || 'black',\n        };\n    };\n    const [theme, setTheme] = useState(getStoredTheme);\n\n    useEffect(() => {\n        GetReactionList(token)\n            .then(responseData => {\n                if (responseData.status === 200) {\n                    setReactionList(responseData.data.reactions);\n                } else {\n                    console.error('Error fetching Reaction list');\n                }\n            })\n            .catch(error => {\n                console.error('Error fetching Reaction list:', error);\n            });\n    }, [token]);\n\n    const handleReactionClick = (Reaction) => {\n        setSelectedReaction(Reaction);\n    };\n\n    const changeName = (e) => {\n        setName(e);\n    }\n\n    const changeDescription = (e) => {\n        setDescription(e);\n    }\n\n    function Reaction(e) {\n        e.preventDefault();\n        if (selectedReaction) {\n            const updatedParamsObject = {};\n            const updatedParamsArray = Object.keys(selectedReaction.params).map(paramName => ({\n                url: selectedReaction.params[paramName].value,\n            }));\n            const data = {\n                name: Name,\n                serviceName: selectedReaction.name,\n                description: Description,\n                params: updatedParamsArray,\n            };\n            CreateReaction(data, token)\n                .then(responseData => {\n                    localStorage.setItem('reactionId', responseData.data._id);\n                    history.push('/Applet');\n                })\n                .catch(error => {\n                    console.error('Error from CreateReaction:', error);\n                });\n        }\n    }\n\n    document.body.style.backgroundColor = theme.backgroundColor;\n    document.body.style.color = theme.textColor;\n\n    return (\n        <div className='reaction-container'>\n            <div class=\"top-bar\" style={{ borderBottom: \"3px solid\", borderColor: theme.textColor }}>\n                <img src={logo} alt=\"Your Logo\" class=\"logo\" />\n                <h1 class=\"action-title\" style={{ color: theme.textColor, marginRight: \"50%\" }}>Reaction</h1>\n            </div>\n            <div className=\"window\">\n                <div className=\"reaction-list\">\n                    <div className='available-reactions-container'>\n                        {Array.isArray(ReactionList) ? (\n                            ReactionList.map((Reaction, index) => (\n                                <div key={index}\n                                    onClick={() => handleReactionClick(Reaction)}\n                                    className={`available-reaction ${selectedReaction === Reaction ? 'selected' : ''}`}>\n                                    {Reaction.name.replace(/_/g, ' ')}\n                                </div>\n                            ))\n                        ) : (\n                            <p>No Reactions available.</p>\n                        )}\n                    </div>\n                </div>\n                <div className=\"selected-reaction\" style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>\n                {selectedReaction && (\n                    <div>\n                        <InputSettings defaultText={''} header={\"Name:\"} type={'text'} updateField={(value) => changeName(value)}></InputSettings>\n                        <InputSettings defaultText={''} header={\"Description:\"} type={'text'} updateField={(value) => changeDescription(value)}></InputSettings>\n                        {selectedReaction.params && (\n                            <div>\n                                <h3>Parameters:</h3>\n                                <ul>\n                                    {Object.keys(selectedReaction.params).map(paramName => (\n                                        <div key={paramName}>\n                                            <InputSettings defaultText={''} header={selectedReaction.description} type={\"text\"} updateField={(value) => {\n                                                setSelectedReaction((prevState) => ({\n                                                    ...prevState,\n                                                    params: {\n                                                        ...prevState.params,\n                                                        [paramName]: {\n                                                            ...prevState.params[paramName],\n                                                            value: value\n                                                        }\n                                                    }\n                                                }));\n                                            }}\n                                            ></InputSettings>\n                                        </div>\n                                    ))}\n                                </ul>\n                            </div>\n                        )}\n                        <button className='reaction-button' style={{ visibility: selectedReaction ? 'visible' : 'hidden' }} onClick={Reaction}>\n                            Call Reaction\n                        </button>\n                    </div>\n                )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Reaction_form;\n","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/pages/Action.js",["161"],[],"import React, { useEffect, useState } from 'react';\nimport GetActionList from '../components/GetActionList';\nimport \"../styles/Action.css\"\nimport { useAuth } from '../AuthContext';\nimport { useHistory } from 'react-router-dom';\nimport InputSettings from '../components/InputSettings';\nimport CreateAction from '../components/CreateAction'\nimport logo from '../assets/logo.png';\n\nconst Action_form = () => {\n    const [actionList, setActionList] = useState([]);\n    const [selectedAction, setSelectedAction] = useState(null);\n    const [Name, setName] = useState('');\n    const [Description, setDescription] = useState('');\n    const { token } = useAuth();\n    const history = useHistory();\n\n    const getStoredTheme = () => {\n        const savedBackgroundColor = localStorage.getItem('backgroundColor');\n        const savedTextColor = localStorage.getItem('textColor');\n        return {\n            backgroundColor: savedBackgroundColor || 'white',\n            textColor: savedTextColor || 'black',\n        };\n    };\n    const [theme, setTheme] = useState(getStoredTheme);\n\n    useEffect(() => {\n        GetActionList(token)\n            .then(responseData => {\n                if (responseData.status === 200) {\n                    setActionList(responseData.data.actions);\n                } else {\n                    console.error('Error fetching action list');\n                }\n            })\n            .catch(error => {\n                console.error('Error fetching action list:', error);\n            });\n    }, [token]);\n\n    const handleActionClick = (action) => {\n        setSelectedAction(action);\n    };\n\n    const changeName = (e) => {\n        setName(e);\n    }\n\n    const changeDescription = (e) => {\n        setDescription(e);\n    }\n\n    function Action(e) {\n        e.preventDefault();\n        if (selectedAction) {\n            const updatedParamsObject = {};\n            for (const paramName in selectedAction.params) {\n                updatedParamsObject[paramName] = selectedAction.params[paramName].value;\n            }\n            const data = {\n                name: Name,\n                serviceName: selectedAction.name,\n                description: Description,\n                params: [updatedParamsObject],\n            };\n            CreateAction(data, token)\n                .then(responseData => {\n                    localStorage.setItem('actionId', responseData.data.action._id);\n                    history.push('/Reaction');\n                })\n                .catch(error => {\n                    console.error('Error from CreateAction:', error);\n                });\n        }\n    }\n\n    document.body.style.backgroundColor = theme.backgroundColor;\n    document.body.style.color = theme.textColor;\n\n    return (\n        <div className='action-container'>\n            <div class=\"top-bar\" style={{ borderBottom: \"3px solid\", borderColor: theme.textColor }}>\n                <img src={logo} alt=\"Your Logo\" class=\"logo\" />\n                <h1 class=\"action-title\" style={{ color: theme.textColor, marginRight: \"50%\" }}>Action</h1>\n            </div>\n            <div className=\"window\">\n                <div className=\"action-list\">\n                    <div className=\"available-actions-container\">\n                        {Array.isArray(actionList) ? (\n                            actionList.map((action, index) => (\n                                <div\n                                    key={index}\n                                    onClick={() => handleActionClick(action)}\n                                    className={`available-action ${selectedAction === action ? 'selected' : ''}`}\n                                >\n                                    {action.name.replace(/_/g, ' ')}\n                                </div>\n                            ))\n                        ) : (\n                            <p>No actions available.</p>\n                        )}\n                    </div>\n                </div>\n                <div className=\"selected-action\" style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>\n                    {selectedAction && (\n                        <div>\n                            <InputSettings defaultText={''} header={\"Name:\"} type={'text'} updateField={(value) => changeName(value)} />\n                            <InputSettings defaultText={''} header={\"Description:\"} type={'text'} updateField={(value) => changeDescription(value)} />\n                            {selectedAction.params && (\n                                <div>\n                                    <h3>Parameters:</h3>\n                                    <ul>\n                                        {Object.keys(selectedAction.params).map(paramName => (\n                                            <div key={paramName}>\n                                                <InputSettings defaultText={''} header={paramName} type={\"text\"} updateField={(value) => {\n                                                    setSelectedAction({\n                                                        ...selectedAction,\n                                                        params: {\n                                                            ...selectedAction.params,\n                                                            [paramName]: {\n                                                                ...selectedAction.params[paramName],\n                                                                value: value\n                                                            }\n                                                        }\n                                                    });\n                                                }} />\n                                            </div>\n                                        ))}\n                                    </ul>\n                                </div>\n                            )}\n                            <button style={{ visibility: selectedAction ? 'visible' : 'hidden' }} className='action-button' onClick={Action}>\n                                Call Action\n                            </button>\n                        </div>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Action_form;\n","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/pages/Applet.js",["162","163","164","165"],[],"import React, { useEffect, useState } from 'react';\nimport \"../styles/Applet.css\"\nimport { useAuth } from '../AuthContext';\nimport { useHistory } from 'react-router-dom';\nimport GetApplets from '../components/GetApplets';\nimport CreateApplet from '../components/CreateApplet';\nimport ExecuteApplet from '../components/ExecuteApplet'\nimport StopApplet from '../components/StopApplet'\nimport InputSettings from '../components/InputSettings';\nimport GetUserData from '../request/GetUserData';\nimport logo from '../assets/logo.png';\n\nconst Applet = () => {\n    const { token } = useAuth();\n    const history = useHistory();\n    const [Name, setName] = useState('');\n    const [Description, setDescription] = useState('');\n    const [Frequency, setFrequency] = useState('');\n    const actionId = localStorage.getItem('actionId');\n    const reactionId = localStorage.getItem('reactionId');\n    const [userData, setUserData] = useState(null);\n\n    const getStoredTheme = () => {\n        const savedBackgroundColor = localStorage.getItem('backgroundColor');\n        const savedTextColor = localStorage.getItem('textColor');\n        return {\n            backgroundColor: savedBackgroundColor || 'white',\n            textColor: savedTextColor || 'black',\n        };\n    };\n    const [theme, setTheme] = useState(getStoredTheme);\n\n    function Applet(e) {\n        e.preventDefault();\n        if (actionId && reactionId && userData) {\n            let data = {\n                name: Name,\n                description: Description,\n                actions: [actionId],\n                reactions: [reactionId],\n                frequency: Frequency + \" seconds\",\n                functionName: \"on_change_on_action\",\n                user: userData._id,\n            };\n            CreateApplet(data, token)\n                .then(responseData => {\n                    localStorage.setItem('appletId', responseData);\n                    history.push('/Dashboard');\n                })\n                .catch(error => {\n                    console.error('Error from CreateApplet:', error);\n                });\n        }\n    }\n    useEffect(() => {\n        if (token && !userData) {\n            GetUserData(token)\n                .then((response) => {\n                    if (response.status === 200) {\n                        setUserData(response.data);\n                    } else {\n                        console.error('Erreur lors de la récupération des données de l\\'utilisateur.');\n                    }\n                })\n                .catch((error) => {\n                    console.error('Erreur lors de la récupération des données de l\\'utilisateur.', error);\n                });\n        }\n    });\n\n    return (\n        <div className='applet-container'>\n            <div class=\"top-bar\" style={{ borderBottom: \"3px solid\", borderColor: theme.textColor }}>\n                <img src={logo} alt=\"Your Logo\" class=\"logo\" />\n                <h1 class=\"action-title\" style={{ color: theme.textColor, marginRight: \"50%\" }}>Applet</h1>\n            </div>\n            <div className=\"window\">\n                <form onSubmit={Applet} style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', marginTop: \"100px\"}}>\n                    <InputSettings defaultText={''} header={\"Name:\"} type={\"text\"} updateField={(value) => setName(value)}></InputSettings>\n                    <InputSettings defaultText={''} header={\"Description:\"} type={\"text\"} updateField={(value) => setDescription(value)}></InputSettings>\n                    <InputSettings defaultText={''} header={\"Frequency (in seconds):\"} type={\"text\"} updateField={(value) => setFrequency(value)}></InputSettings>\n                    <button type=\"submit\" className=''>Create the Applet</button>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nexport default Applet;","/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/components/StopApplet.js",[],[],"/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/components/InputPassword.js",[],[],"/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/components/InputSettings.js",[],[],"/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/components/InputText.js",[],[],"/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/components/GetApplets.js",[],[],"/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/components/ExecuteApplet.js",[],[],"/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/components/GetReactionList.js",[],[],"/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/components/GetActionList.js",[],[],"/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/components/CreateReaction.js",[],[],"/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/components/CreateApplet.js",[],[],"/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/components/CreateAction.js",[],[],"/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/request/Login_request.js",[],[],"/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/request/GetUserData.js",[],[],"/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/request/UpdateUserData.js",[],[],"/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/request/Register_request.js",[],[],"/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/request/GoogleLogin.js",[],[],"/home/maxencecrespel/Tek3/AREA/B-DEV-500-LIL-5-1-area-maxence.crespel/client_web/src/request/GoogleCallback.js",[],[],{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":29,"column":17,"nodeType":"170","messageId":"171","endLine":29,"endColumn":25},{"ruleId":"172","severity":1,"message":"173","line":62,"column":6,"nodeType":"174","endLine":62,"endColumn":23,"suggestions":"175"},{"ruleId":"168","severity":1,"message":"176","line":104,"column":15,"nodeType":"170","messageId":"171","endLine":104,"endColumn":23},{"ruleId":"168","severity":1,"message":"169","line":25,"column":17,"nodeType":"170","messageId":"171","endLine":25,"endColumn":25},{"ruleId":"168","severity":1,"message":"169","line":32,"column":17,"nodeType":"170","messageId":"171","endLine":32,"endColumn":25},{"ruleId":"168","severity":1,"message":"169","line":26,"column":19,"nodeType":"170","messageId":"171","endLine":26,"endColumn":27},{"ruleId":"168","severity":1,"message":"177","line":57,"column":19,"nodeType":"170","messageId":"171","endLine":57,"endColumn":38},{"ruleId":"168","severity":1,"message":"169","line":26,"column":19,"nodeType":"170","messageId":"171","endLine":26,"endColumn":27},{"ruleId":"168","severity":1,"message":"178","line":5,"column":8,"nodeType":"170","messageId":"171","endLine":5,"endColumn":18},{"ruleId":"168","severity":1,"message":"179","line":7,"column":8,"nodeType":"170","messageId":"171","endLine":7,"endColumn":21},{"ruleId":"168","severity":1,"message":"180","line":8,"column":8,"nodeType":"170","messageId":"171","endLine":8,"endColumn":18},{"ruleId":"168","severity":1,"message":"169","line":31,"column":19,"nodeType":"170","messageId":"171","endLine":31,"endColumn":27},"no-new-object",["181"],"no-unused-vars","'setTheme' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleGoogleCallback'. Either include it or remove the dependency array.","ArrayExpression",["182"],"'userData' is assigned a value but never used.","'updatedParamsObject' is assigned a value but never used.","'GetApplets' is defined but never used.","'ExecuteApplet' is defined but never used.","'StopApplet' is defined but never used.","no-object-constructor",{"desc":"183","fix":"184"},"Update the dependencies array to be: [handleGoogleCallback, token, userData]",{"range":"185","text":"186"},[2238,2255],"[handleGoogleCallback, token, userData]"]